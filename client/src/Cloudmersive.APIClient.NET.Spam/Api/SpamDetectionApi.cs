/*
 * spamapi
 *
 * Easily and directly scan and block phishing security threats.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Cloudmersive.APIClient.NET.Spam.Client;
using Cloudmersive.APIClient.NET.Spam.Model;

namespace Cloudmersive.APIClient.NET.Spam.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpamDetectionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Perform advanced AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpamDetectionAdvancedResponse</returns>
        SpamDetectionAdvancedResponse SpamDetectTextStringAdvancedPost(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0);

        /// <summary>
        /// Perform advanced AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpamDetectionAdvancedResponse</returns>
        ApiResponse<SpamDetectionAdvancedResponse> SpamDetectTextStringAdvancedPostWithHttpInfo(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0);
        /// <summary>
        /// Perform AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpamDetectionResponse</returns>
        SpamDetectionResponse SpamDetectTextStringPost(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0);

        /// <summary>
        /// Perform AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpamDetectionResponse</returns>
        ApiResponse<SpamDetectionResponse> SpamDetectTextStringPostWithHttpInfo(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpamDetectionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Perform advanced AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpamDetectionAdvancedResponse</returns>
        System.Threading.Tasks.Task<SpamDetectionAdvancedResponse> SpamDetectTextStringAdvancedPostAsync(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Perform advanced AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpamDetectionAdvancedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpamDetectionAdvancedResponse>> SpamDetectTextStringAdvancedPostWithHttpInfoAsync(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Perform AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpamDetectionResponse</returns>
        System.Threading.Tasks.Task<SpamDetectionResponse> SpamDetectTextStringPostAsync(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Perform AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpamDetectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpamDetectionResponse>> SpamDetectTextStringPostWithHttpInfoAsync(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpamDetectionApi : ISpamDetectionApiSync, ISpamDetectionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SpamDetectionApi : ISpamDetectionApi
    {
        private Cloudmersive.APIClient.NET.Spam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpamDetectionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpamDetectionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpamDetectionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpamDetectionApi(string basePath)
        {
            this.Configuration = Cloudmersive.APIClient.NET.Spam.Client.Configuration.MergeConfigurations(
                Cloudmersive.APIClient.NET.Spam.Client.GlobalConfiguration.Instance,
                new Cloudmersive.APIClient.NET.Spam.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Cloudmersive.APIClient.NET.Spam.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloudmersive.APIClient.NET.Spam.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Cloudmersive.APIClient.NET.Spam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpamDetectionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpamDetectionApi(Cloudmersive.APIClient.NET.Spam.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Cloudmersive.APIClient.NET.Spam.Client.Configuration.MergeConfigurations(
                Cloudmersive.APIClient.NET.Spam.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Cloudmersive.APIClient.NET.Spam.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloudmersive.APIClient.NET.Spam.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Cloudmersive.APIClient.NET.Spam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpamDetectionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SpamDetectionApi(Cloudmersive.APIClient.NET.Spam.Client.ISynchronousClient client, Cloudmersive.APIClient.NET.Spam.Client.IAsynchronousClient asyncClient, Cloudmersive.APIClient.NET.Spam.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Cloudmersive.APIClient.NET.Spam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Cloudmersive.APIClient.NET.Spam.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Cloudmersive.APIClient.NET.Spam.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.Spam.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.Spam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Perform advanced AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content. 
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpamDetectionAdvancedResponse</returns>
        public SpamDetectionAdvancedResponse SpamDetectTextStringAdvancedPost(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.Spam.Client.ApiResponse<SpamDetectionAdvancedResponse> localVarResponse = SpamDetectTextStringAdvancedPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform advanced AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content. 
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpamDetectionAdvancedResponse</returns>
        public Cloudmersive.APIClient.NET.Spam.Client.ApiResponse<SpamDetectionAdvancedResponse> SpamDetectTextStringAdvancedPostWithHttpInfo(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.Spam.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.Spam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.Spam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.Spam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SpamDetectionApi.SpamDetectTextStringAdvancedPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SpamDetectionAdvancedResponse>("/spam/detect/text-string/advanced", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpamDetectTextStringAdvancedPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform advanced AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content. 
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpamDetectionAdvancedResponse</returns>
        public async System.Threading.Tasks.Task<SpamDetectionAdvancedResponse> SpamDetectTextStringAdvancedPostAsync(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.Spam.Client.ApiResponse<SpamDetectionAdvancedResponse> localVarResponse = await SpamDetectTextStringAdvancedPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform advanced AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content. 
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpamDetectionAdvancedResponse)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.Spam.Client.ApiResponse<SpamDetectionAdvancedResponse>> SpamDetectTextStringAdvancedPostWithHttpInfoAsync(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Cloudmersive.APIClient.NET.Spam.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.Spam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.Spam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.Spam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SpamDetectionApi.SpamDetectTextStringAdvancedPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SpamDetectionAdvancedResponse>("/spam/detect/text-string/advanced", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpamDetectTextStringAdvancedPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content. 
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SpamDetectionResponse</returns>
        public SpamDetectionResponse SpamDetectTextStringPost(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.Spam.Client.ApiResponse<SpamDetectionResponse> localVarResponse = SpamDetectTextStringPostWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content. 
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SpamDetectionResponse</returns>
        public Cloudmersive.APIClient.NET.Spam.Client.ApiResponse<SpamDetectionResponse> SpamDetectTextStringPostWithHttpInfo(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.Spam.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.Spam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.Spam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.Spam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SpamDetectionApi.SpamDetectTextStringPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SpamDetectionResponse>("/spam/detect/text-string", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpamDetectTextStringPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Perform AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content. 
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SpamDetectionResponse</returns>
        public async System.Threading.Tasks.Task<SpamDetectionResponse> SpamDetectTextStringPostAsync(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.Spam.Client.ApiResponse<SpamDetectionResponse> localVarResponse = await SpamDetectTextStringPostWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Perform AI spam detection and classification against input text string.  Analyzes input content as well as embedded URLs with AI deep learnign to detect spam, phishing and other unsafe content. 
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Spam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Spam detection request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SpamDetectionResponse)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.Spam.Client.ApiResponse<SpamDetectionResponse>> SpamDetectTextStringPostWithHttpInfoAsync(SpamDetectionAdvancedRequest body = default(SpamDetectionAdvancedRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Cloudmersive.APIClient.NET.Spam.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.Spam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.Spam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.Spam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SpamDetectionApi.SpamDetectTextStringPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SpamDetectionResponse>("/spam/detect/text-string", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SpamDetectTextStringPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
