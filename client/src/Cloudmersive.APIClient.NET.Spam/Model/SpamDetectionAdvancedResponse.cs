/* 
 * spamapi
 *
 * Easily and directly scan and block phishing security threats.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Spam.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Spam.Model
{
    /// <summary>
    /// Result of detecting spam using AI
    /// </summary>
    [DataContract]
    public partial class SpamDetectionAdvancedResponse :  IEquatable<SpamDetectionAdvancedResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpamDetectionAdvancedResponse" /> class.
        /// </summary>
        /// <param name="cleanResult">True if the result is not spam (clean), and false otherwise.</param>
        /// <param name="containsSpam">True if the input text contains spam, false otherwise.</param>
        /// <param name="containsUnsolicitedSales">True if the input text contains unsolicited sales, false otherwise.</param>
        /// <param name="containsPromotionalContent">True if the input text contains promotional content, false otherwise.</param>
        /// <param name="containsPhishingAttempt">True if the input text contains a phishing attempt, false otherwise.</param>
        public SpamDetectionAdvancedResponse(bool? cleanResult = default(bool?), bool? containsSpam = default(bool?), bool? containsUnsolicitedSales = default(bool?), bool? containsPromotionalContent = default(bool?), bool? containsPhishingAttempt = default(bool?))
        {
            this.CleanResult = cleanResult;
            this.ContainsSpam = containsSpam;
            this.ContainsUnsolicitedSales = containsUnsolicitedSales;
            this.ContainsPromotionalContent = containsPromotionalContent;
            this.ContainsPhishingAttempt = containsPhishingAttempt;
        }
        
        /// <summary>
        /// True if the result is not spam (clean), and false otherwise
        /// </summary>
        /// <value>True if the result is not spam (clean), and false otherwise</value>
        [DataMember(Name="CleanResult", EmitDefaultValue=false)]
        public bool? CleanResult { get; set; }

        /// <summary>
        /// True if the input text contains spam, false otherwise
        /// </summary>
        /// <value>True if the input text contains spam, false otherwise</value>
        [DataMember(Name="ContainsSpam", EmitDefaultValue=false)]
        public bool? ContainsSpam { get; set; }

        /// <summary>
        /// True if the input text contains unsolicited sales, false otherwise
        /// </summary>
        /// <value>True if the input text contains unsolicited sales, false otherwise</value>
        [DataMember(Name="ContainsUnsolicitedSales", EmitDefaultValue=false)]
        public bool? ContainsUnsolicitedSales { get; set; }

        /// <summary>
        /// True if the input text contains promotional content, false otherwise
        /// </summary>
        /// <value>True if the input text contains promotional content, false otherwise</value>
        [DataMember(Name="ContainsPromotionalContent", EmitDefaultValue=false)]
        public bool? ContainsPromotionalContent { get; set; }

        /// <summary>
        /// True if the input text contains a phishing attempt, false otherwise
        /// </summary>
        /// <value>True if the input text contains a phishing attempt, false otherwise</value>
        [DataMember(Name="ContainsPhishingAttempt", EmitDefaultValue=false)]
        public bool? ContainsPhishingAttempt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpamDetectionAdvancedResponse {\n");
            sb.Append("  CleanResult: ").Append(CleanResult).Append("\n");
            sb.Append("  ContainsSpam: ").Append(ContainsSpam).Append("\n");
            sb.Append("  ContainsUnsolicitedSales: ").Append(ContainsUnsolicitedSales).Append("\n");
            sb.Append("  ContainsPromotionalContent: ").Append(ContainsPromotionalContent).Append("\n");
            sb.Append("  ContainsPhishingAttempt: ").Append(ContainsPhishingAttempt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpamDetectionAdvancedResponse);
        }

        /// <summary>
        /// Returns true if SpamDetectionAdvancedResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SpamDetectionAdvancedResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpamDetectionAdvancedResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CleanResult == input.CleanResult ||
                    (this.CleanResult != null &&
                    this.CleanResult.Equals(input.CleanResult))
                ) && 
                (
                    this.ContainsSpam == input.ContainsSpam ||
                    (this.ContainsSpam != null &&
                    this.ContainsSpam.Equals(input.ContainsSpam))
                ) && 
                (
                    this.ContainsUnsolicitedSales == input.ContainsUnsolicitedSales ||
                    (this.ContainsUnsolicitedSales != null &&
                    this.ContainsUnsolicitedSales.Equals(input.ContainsUnsolicitedSales))
                ) && 
                (
                    this.ContainsPromotionalContent == input.ContainsPromotionalContent ||
                    (this.ContainsPromotionalContent != null &&
                    this.ContainsPromotionalContent.Equals(input.ContainsPromotionalContent))
                ) && 
                (
                    this.ContainsPhishingAttempt == input.ContainsPhishingAttempt ||
                    (this.ContainsPhishingAttempt != null &&
                    this.ContainsPhishingAttempt.Equals(input.ContainsPhishingAttempt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CleanResult != null)
                    hashCode = hashCode * 59 + this.CleanResult.GetHashCode();
                if (this.ContainsSpam != null)
                    hashCode = hashCode * 59 + this.ContainsSpam.GetHashCode();
                if (this.ContainsUnsolicitedSales != null)
                    hashCode = hashCode * 59 + this.ContainsUnsolicitedSales.GetHashCode();
                if (this.ContainsPromotionalContent != null)
                    hashCode = hashCode * 59 + this.ContainsPromotionalContent.GetHashCode();
                if (this.ContainsPhishingAttempt != null)
                    hashCode = hashCode * 59 + this.ContainsPhishingAttempt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
