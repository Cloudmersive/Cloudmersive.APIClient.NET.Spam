/*
 * spamapi
 *
 * Easily and directly scan and block phishing security threats.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloudmersive.APIClient.NET.Spam.Client.OpenAPIDateConverter;

namespace Cloudmersive.APIClient.NET.Spam.Model
{
    /// <summary>
    /// Result of detecting spam using AI
    /// </summary>
    [DataContract(Name = "SpamDetectionResponse")]
    public partial class SpamDetectionResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpamDetectionResponse" /> class.
        /// </summary>
        /// <param name="cleanResult">True if the result is not spam (clean), and false otherwise.</param>
        public SpamDetectionResponse(bool cleanResult = default(bool))
        {
            this.CleanResult = cleanResult;
        }

        /// <summary>
        /// True if the result is not spam (clean), and false otherwise
        /// </summary>
        /// <value>True if the result is not spam (clean), and false otherwise</value>
        [DataMember(Name = "CleanResult", EmitDefaultValue = true)]
        public bool CleanResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpamDetectionResponse {\n");
            sb.Append("  CleanResult: ").Append(CleanResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
