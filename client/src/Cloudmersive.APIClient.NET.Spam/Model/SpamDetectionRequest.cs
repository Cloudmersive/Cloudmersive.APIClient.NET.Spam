/*
 * spamapi
 *
 * Easily and directly scan and block spam security threats in input.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloudmersive.APIClient.NET.Spam.Client.OpenAPIDateConverter;

namespace Cloudmersive.APIClient.NET.Spam.Model
{
    /// <summary>
    /// AI spam detection request
    /// </summary>
    [DataContract(Name = "SpamDetectionRequest")]
    public partial class SpamDetectionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpamDetectionRequest" /> class.
        /// </summary>
        /// <param name="inputString">Input text string to detect spam against.</param>
        /// <param name="model">Optional: Specify which AI model to use.  Possible choices are Normal and Advanced.  Default is Advanced..</param>
        public SpamDetectionRequest(string inputString = default(string), string model = default(string))
        {
            this.InputString = inputString;
            this.Model = model;
        }

        /// <summary>
        /// Input text string to detect spam against
        /// </summary>
        /// <value>Input text string to detect spam against</value>
        /*
        <example>Get free crypto now!!!</example>
        */
        [DataMember(Name = "InputString", EmitDefaultValue = false)]
        public string InputString { get; set; }

        /// <summary>
        /// Optional: Specify which AI model to use.  Possible choices are Normal and Advanced.  Default is Advanced.
        /// </summary>
        /// <value>Optional: Specify which AI model to use.  Possible choices are Normal and Advanced.  Default is Advanced.</value>
        /*
        <example>Advanced</example>
        */
        [DataMember(Name = "Model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpamDetectionRequest {\n");
            sb.Append("  InputString: ").Append(InputString).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
